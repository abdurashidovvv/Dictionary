package com.abdurashidov.dictionary.adaptersimport android.annotation.SuppressLintimport android.media.AudioManagerimport android.media.MediaPlayerimport android.view.LayoutInflaterimport android.view.ViewGroupimport android.widget.Toastimport androidx.recyclerview.widget.RecyclerViewimport com.abdurashidov.dictionary.Rimport com.abdurashidov.dictionary.databinding.RvItemBindingimport com.abdurashidov.dictionary.models.ApiResponseclass RvAdapter(val list:List<ApiResponse>): RecyclerView.Adapter<RvAdapter.Vh>() {    inner class Vh(val rvItem: RvItemBinding): RecyclerView.ViewHolder(rvItem.root){        @SuppressLint("SetTextI18n")        fun onBind(label: ApiResponse, position: Int){            rvItem.word.text="${label.word}  (${label.meanings[0].partOfSpeech})"            var definition="Definition: "            for (meaning in label.meanings) {                meaning.definitions.forEach {                    definition+="\n\n${it.definition}"                }            }            rvItem.definition.text= definition            var synonym="Synonym: "            for (meaning in label.meanings) {                for (s in meaning.synonyms) {                    synonym+="\n$s"                }            }            rvItem.meaning.text=synonym            var audioUrl=""            audioUrl=getAudio(label, "uk")?:"empty"            if (audioUrl=="empty"){                audioUrl=getAudio(label, "us")?:"No audio found for this word."            }            rvItem.phonetics.text=audioUrl            rvItem.sound.setOnClickListener {                val mediaPlayer=MediaPlayer()                mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC)                try {                    if (audioUrl.isNotBlank()){                        mediaPlayer.setDataSource(audioUrl)                        mediaPlayer.prepare()                        mediaPlayer.start()                    }else{                        rvItem.sound.setImageResource(R.drawable.volume_mute)                    }                }catch (e:Exception){                    e.printStackTrace()                }            }        }    }    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): Vh {        return Vh(RvItemBinding.inflate(LayoutInflater.from(parent.context), parent, false))    }    override fun onBindViewHolder(holder: Vh, position: Int) {        holder.onBind(list[position], position)    }    override fun getItemCount(): Int {        return list.size    }    fun getAudio(apiResponse: ApiResponse, str:String): String? {        apiResponse.phonetics.forEach {            if (it.audio.length!=0){                var audio=""                audio = it.audio.subSequence(                    it.audio.length - 6,                    it.audio.length - 4                ) as String                if (audio==str){                    return it.audio                }            }        }        return null    }}