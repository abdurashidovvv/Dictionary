package com.abdurashidov.dictionary.viewmodelimport androidx.lifecycle.MutableLiveDataimport androidx.lifecycle.ViewModelimport androidx.lifecycle.viewModelScopeimport com.abdurashidov.dictionary.models.ApiResponseimport com.abdurashidov.dictionary.repository.DictionaryRepositoryimport com.abdurashidov.dictionary.utils.Resourceimport kotlinx.coroutines.Dispatchersimport kotlinx.coroutines.coroutineScopeimport kotlinx.coroutines.launchimport kotlinx.coroutines.withContextclass MyDictViewModel(val dictionaryRepository: DictionaryRepository):ViewModel() {    private val liveData=MutableLiveData<Resource<List<ApiResponse>>>()    fun getWordMeaning(word:String):MutableLiveData<Resource<List<ApiResponse>>>{        viewModelScope.launch {            liveData.postValue(Resource.loading("loading"))            try {                coroutineScope {                    val list:List<ApiResponse> =                        withContext(Dispatchers.Default) {                            dictionaryRepository.getMeaning(word)                        }                    liveData.postValue(Resource.success(list))                }            }catch (e:Exception){                liveData.postValue(Resource.error(e.message))            }        }        return liveData    }}